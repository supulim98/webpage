# -*- coding: utf-8 -*-
"""dftest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LZeZ_v2qz-Yc0Kp2iP48ELgXZs6Zq20G
"""

import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import plotly.express as px
from PIL import Image
import datetime

up_image=Image.open('up_image.png') #상단 이미지
st.image(up_image, use_column_width=True)

def predict_data(nrows): #첫번째 그래프: 예측값 데이터 불러오기
  data=pd.read_csv('submission_1203.csv', nrows=nrows)
  return data

def real_data(nrows):#두번째 그래프: 실제값 데이터 불러오기
  data1=pd.read_csv('test_2021-12-02.csv', encoding='utf-8', nrows=nrows)
  data1['date'] = pd.to_datetime(data1.date, format='%Y-%m-%d')
  return data1

p_data = predict_data(1000)
r_data = real_data(2000)

option = st.sidebar.selectbox('가격 예측을 원하는 농산물을 선택하세요',
                                ['배추_가격(원/kg)','무_가격(원/kg)','양파_가격(원/kg)','마늘_가격(원/kg)',
                                 '대파_가격(원/kg)','깻잎_가격(원/kg)','시금치_가격(원/kg)','미나리_가격(원/kg)',
                                 '파프리카_가격(원/kg)','토마토_가격(원/kg)']) #옵션으로 가격 궁금한 품목 선택

start = st.sidebar.date_input("시작 날짜를 선택하세요.", datetime.datetime.now()) #실제값 출력 위한 범위 지정
end = st.sidebar.date_input("끝 날짜를 선택하세요.", datetime.datetime.now())

st.subheader("농산물 가격 예측하기") 

#당일 농산물 예측값 제공: 보다 정확한 예측값을 제공하기 위해 오늘을 가르키는 1주 전, 2주 전, 4주 전 데이터들을 합해 평균 계산
today = datetime.datetime.today()
li = []
li2 =[]
for i in [7, 14, 28]: 
  if i == 7:
    day= (today-datetime.timedelta(i)).strftime('%Y-%m-%d')
    t_day = (today+datetime.timedelta(i)).strftime('%Y-%m-%d')
    li.append(f'{day}+1week')
    li2.append(f'{t_day}')
 
  if i == 14:
    day= (today-datetime.timedelta(i)).strftime('%Y-%m-%d')
    t_day = (today+datetime.timedelta(i)).strftime('%Y-%m-%d')
    li.append(f'{day}+2week')
    li2.append(f'{t_day}')

  if i == 28:
    day= (today-datetime.timedelta(i)).strftime('%Y-%m-%d')
    t_day = (today+datetime.timedelta(i)).strftime('%Y-%m-%d')
    li.append(f'{day}+4week')
    li2.append(f'{t_day}')

today_data1 = p_data.loc[p_data["예측대상일자"]==li[0], [option]] #해당하는 날짜의 품목 가격 저장
today_data2 = p_data.loc[p_data["예측대상일자"]==li[1], [option]]
today_data3 = p_data.loc[p_data["예측대상일자"]==li[2], [option]]

today_data4=today_data1.append(today_data2) #데이터프레임 병합
today_data=today_data4.append(today_data3)

mean_data = today_data[option].mean() #평균을 구함
mean_data1 = str(mean_data)

df = pd.DataFrame(p_data[-3:], columns=[option]) #첫번째 그래프: 예측값 출력은 전날 예측된 가격 출력
df.loc[0]=mean_data
df.index=[li2[0], li2[1], li2[2] ,'today']

st.write(today)
st.write("오늘의 예측값은 " , mean_data1, "원(kg) 입니다.")
st.bar_chart(df)

mid_image=Image.open('mid_image.png') #중간 이미지
st.image(mid_image, use_column_width=True)

st.subheader("과거 농산물 가격 조회하기") #두번째 그래프: 사용자가 지정한 범위에 맞는 데이터 출력
st.write(str(start), "~", str(end), "기간을 출력합니다.")
df1 = pd.DataFrame(r_data[['date', option]][:2000])
df1.set_index("date",inplace=True)

frame=df1[start:end]
st.bar_chart(frame)

down_image=Image.open('down_image.png') #하단 이미지
st.image(down_image, use_column_width=True)